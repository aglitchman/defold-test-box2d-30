function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })

	if not html5 then
		sys.set_error_handler(function(source, message, traceback)
			print("ERROR ^^^^^^^^^^^^^^^^^")
			sys.exit(1)
		end)
	end

	math.randomseed(123456789)

	-- COMMENT OUT TO DISABLE PHYSICS TEST
	self.objects = {}
	self.center = go.get_position()
	local r = 2000
	for i = 1, 2000 do
		local id = factory.create("#factory", self.center + vmath.vector3((math.random() - 0.5) * r, (math.random() - 0.5) * r, 0))
		local obj = {
			id = id,
			physics_url = msg.url(nil, id, "collisionobject")
		}
		table.insert(self.objects, obj)
	end

	self.big_obj_id = factory.create("#factory_big_obj", self.center)
	self.big_obj_url = msg.url(nil, self.big_obj_id, "collisionobject")
	self.big_obj_up = false
end

function update(self, dt)
	if not self.objects then
		return
	end
	for i = 1, 20 do
		local obj = self.objects[math.random(1, #self.objects)]
		local pos = go.get_position(obj.id)
		local force_to_center = (self.center - pos) * 5 * go.get(obj.physics_url, "mass")
		msg.post(obj.physics_url, "apply_force", {force = force_to_center, position = pos})
	end

	-- Big object movement
	local pos = go.get_position(self.big_obj_id)
	local force_to_center = (self.center - pos) * 5 * go.get(self.big_obj_url, "mass")
	if self.big_obj_up then
		force_to_center.y = 100 * go.get(self.big_obj_url, "mass") 
		if pos.y > 360 + 40 then
			self.big_obj_up = false
		end
	else
		force_to_center.y = -100 * go.get(self.big_obj_url, "mass") 
		if pos.y < 360 - 40 then
			self.big_obj_up = true
		end
	end
	msg.post(self.big_obj_url, "apply_force", {force = force_to_center, position = pos})
end

function fixed_update(self, dt)
end

function on_input(self, action_id, action)
	-- Android "back" button
	if action_id == hash("key_back") and action.pressed then
		sys.exit(0)
	end
end
